plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}
group 'jjm'
version '3.0'

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options{
        encoding "UTF-8"
        charSet 'UTF-8'
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = groupid
           artifactId = group
            version = version

            from components.java
            pom {
                name = "jjm"
                description = "文件加密工具"
                url = "https://github.com/liangke21/EncryptDocuments"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    // 添加开发者描述，这个id不知道是什么
                    developer {
                        id = "1396797522"
                        name = "liangke"
                        email = "1396797522@qq.com"
                    }
                }
                // 添加你的 git 仓库 信息
                scm {
                    connection = "https://github.com/liangke21/EncryptDocuments.git"
                    developerConnection = "https://github.com/liangke21/EncryptDocuments.git"
                    url = "https://github.com/liangke21/EncryptDocuments"
                }


            }
        }
    }
    repositories {
        maven {
         //   def releasesRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/releases/'
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = spaceUsername
                password = spacePassword
            }
        }
    }

}

signing {
   sign publishing.publications.mavenJava
   // sign configurations.archives
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
/*repositories {
    mavenCentral()
}*/


dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'

}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}


test {
    useJUnitPlatform()
}